travl_travel_on_departure = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
		has_variable = travl_travel_event
	}

	effect = {
		var:travl_travel_sender ?= { save_temporary_scope_as = sender }
		var:travl_travel_receiver ?= { save_temporary_scope_as = receiver }
		var:travl_travel_leader ?= { save_temporary_scope_as = leader }
		scope:leader ?= {
			travl_get_companions_effect = { COMPANIONS = companions }
		}

		# Ensure the character is at the current location
		current_travel_plan ?= {
			current_location = { save_temporary_scope_as = current_location }
		}
		if = {
			limit = {
				exists = scope:current_location
				NOT = { location ?= scope:current_location }
			}
			#travl_debug_log_effect = { MSG = travl_setting_current_location_on_departure }
			set_location = scope:current_location
		}

		if = {
			limit = {
				scope:leader ?= this
			}

			# Get all travelers (leader, companions, and their entourages)
			travl_get_travelers_effect = {
				LEADER = scope:leader
				COMPANIONS = companions
				TRAVELERS = travelers
			}

			# Get message recipients (sender and / or recieiver)
			travl_get_message_recipients_effect = {
				SENDER = scope:sender
				RECEIVER = scope:receiver
				RECIPIENTS = recipients
			}

			# Send departure messages
			travl_send_messages_effect = {
				RECIPIENTS = recipients
				TRAVELERS = travelers
				TITLE = travl_msg_departed_for_court
				TEXT = travl_departed_for_court_tt
				OBJECT = scope:receiver
			}
		}

		if = {
			limit = { scope:leader ?= this }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_departed_leader }
		}
		else = {
			travl_debug_log_effect = { MSG = travl_debug_msg_character_departed_companion }
		}
		current_travel_plan ?= {
			travel_plan_owner = { save_temporary_scope_as = owner }
			every_entourage_character = {
				travl_debug_log_2_effect = {
					MSG = travl_debug_msg_character_departed_entourage
					NAME1 = receiver TYPE1 = flag:character
					NAME2 = owner TYPE2 = flag:character
				}
			}
		}
	}
}

travl_travel_on_arrival = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		var:travl_travel_sender ?= { save_temporary_scope_as = sender }
		var:travl_travel_receiver ?= { save_temporary_scope_as = receiver }
		var:travl_travel_leader ?= { save_temporary_scope_as = leader }
		scope:leader ?= {
			travl_get_companions_effect = { COMPANIONS = companions }
		}

		# Ensure the character is at the destination
		current_travel_plan ?= {
			final_destination_province = { save_temporary_scope_as = current_location }
		}
		if = {
			limit = {
				exists = scope:current_location
				NOT = { location ?= scope:current_location }
			}
			#travl_debug_log_effect = { MSG = travl_setting_current_location_on_arrival }
			set_location = scope:current_location
		}

		if = {
			limit = {
				scope:leader ?= this
			}

			# Ensure companions arrive as well
			every_in_list = {
				list = companions
				current_travel_plan ?= {
					add_destination_progress = { years = 2 }
				}
			}

			# Get all travelers (leader, companions, and their entourages)
			travl_get_travelers_effect = {
				LEADER = scope:leader
				COMPANIONS = companions
				TRAVELERS = travelers
			}

			# Get message recipients (sender and / or recieiver)
			travl_get_message_recipients_effect = {
				SENDER = scope:sender
				RECEIVER = scope:receiver
				RECIPIENTS = recipients
			}

			# Send arrival messages
			travl_send_messages_effect = {
				RECIPIENTS = recipients
				TRAVELERS = travelers
				TITLE = travl_msg_arrived_at_court
				TEXT = travl_arrived_at_court_tt
				OBJECT = scope:receiver
			}
		}

		if = {
			limit = { scope:leader ?= this }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_arrived_leader }
		}
		else = {
			travl_debug_log_effect = { MSG = travl_debug_msg_character_arrived_companion }
		}
		current_travel_plan ?= {
			travel_plan_owner = { save_temporary_scope_as = owner }
			every_entourage_character = {
				travl_debug_log_2_effect = {
					MSG = travl_debug_msg_character_arrived_entourage
					NAME1 = receiver TYPE1 = flag:character
					NAME2 = owner TYPE2 = flag:character
				}
			}
		}

		# Maybe gain the traveler trait if adult and unlanded
		if = {
			limit = {
				is_adult = yes
				is_landed = no
				NOT = { has_trait = lifestyle_traveler }
			}
			random_list = {
				20 = { add_trait = lifestyle_traveler }
				80 = {}
			}
		}

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_and_companions_effect = yes

		# Send added entourage characters to pool
		travl_send_added_characters_to_pool_effect = yes
	}
}

# Arrival in any province during travel
on_travel_plan_movement = {
	on_actions = { travl_on_travel_plan_movement travl_on_travel_plan_update_location }
}

travl_on_travel_plan_movement = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_moved }

		var:travl_travel_sender ?= { save_temporary_scope_as = sender }
		var:travl_travel_receiver ?= { save_temporary_scope_as = receiver }
		var:travl_travel_leader ?= { save_temporary_scope_as = leader }
		scope:leader ?= {
			travl_get_companions_effect = { COMPANIONS = companions }
		}

		# Ensure the character is at the current location
		current_travel_plan ?= {
			current_location = { save_temporary_scope_as = current_location }
		}
		if = {
			limit = {
				exists = scope:current_location
				NOT = { location ?= scope:current_location }
			}
			#travl_debug_log_effect = { MSG = travl_setting_current_location_on_movement }
			set_location = scope:current_location
		}

		if = {
			limit = { scope:leader ?= this }

			# Get all travelers (leader, companions, and their entourages)
			travl_get_travelers_effect = {
				LEADER = scope:leader
				COMPANIONS = companions
				TRAVELERS = travelers
			}

			# If the receiver is no longer valid, trigger on_invalid_receiver event
			# If the destination is no longer valid, trigger on_invalid_destination event
			if = {
				limit = {
					scope:receiver ?= {
						NAND = {
							is_alive = yes
							exists = capital_province
						}
					}
				}
				every_in_list = {
					list = travelers
					trigger_event = {
						on_action = travl_on_invalid_receiver
					}
				}
			}
			else_if = {
				limit = {
					scope:receiver ?= { exists = capital_province }
					current_travel_plan ?= {
						NOT = { final_destination_province = scope:receiver.capital_province }
					}
				}
				every_in_list = {
					list = travelers
					trigger_event = {
						on_action = travl_on_invalid_destination
					}
				}
			}

			# Abort travel for prison guards with no prisoners
			if = {
				limit = {
					has_character_modifier = travl_prison_guard_modifier
					any_in_list = {
						list = companions
						count = 0
					}
				}

				travl_debug_log_effect = { MSG = travl_debug_msg_aborting_travel_for_prison_guard }
				current_travel_plan ?= {
					abort_travel_plan = yes
				}
			}
		}
	}

	random_events = {
		chance_of_no_event = {
			value = 80
		}
		100 = 0
		100 = travl_travel_danger.0001 # Danger: Bandits
		200 = travl_travel_danger.0002 # Danger: Missing Companion
		100 = travl_travel_danger.0003 # Danger: Lost
		 50 = travl_travel_danger.0004 # Danger: Out of Water
		200 = travl_travel_danger.0005 # Danger: Aftermath
		 20 = travl_travel_danger.0006 # Danger: Sea Storm
		200 = travl_travel_danger.0007 # Danger: Avalanche
		 50 = travl_travel_danger.0008 # Danger: Snowbound
		100 = travl_travel_danger.0009 # Danger: Ripped Sails
		 50 = travl_travel_danger.0010 # Danger: Brush Fire
		 50 = travl_travel_danger.0011 # Danger: Mosquitoes
		100 = travl_travel_danger.0012 # Danger: Beast Attack
		 20 = travl_travel_danger.0013 # Danger: Spoiled Food
		200 = travl_travel_danger.0014 # Danger: Sickness
	}
}


# Completed a travel plan (arrived at final destination, or completed through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
on_travel_plan_complete = {
	on_actions = { travl_on_travel_plan_update_location }
}

# Aborted a travel plan (travel plan was not completed, or aborted through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
# This usually means everyone gets teleported to their default location after this.
on_travel_plan_abort = {
	on_actions = { travl_on_travel_plan_abort travl_on_travel_plan_update_location }
}

travl_on_travel_plan_abort = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
		NOT = { has_variable = travl_suppress_events }
	}

	effect = {
		travl_debug_log_effect = { MSG = travl_debug_msg_travel_aborted }

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_or_companion_effect = yes

		# Send added entourage characters to pool
		travl_send_added_characters_to_pool_effect = yes
	}
}

# Cancelled a travel plan. Travel plan was cancelled by player interaction, and has
# been rerouted back home. (the travel plan doesn't end yet until they arrive home)
# People in the travel plan were removed from associated activities.
on_travel_plan_cancel = {
	on_actions = { travl_on_travel_plan_update_location }
}

travl_on_travel_plan_update_location = {
	effect = {
		travl_set_location_effect = yes
		current_travel_plan ?= {
			every_entourage_character = {
				limit = { is_alive = yes }
				travl_set_location_effect = yes
			}
		}
	}
}
