travl_travel_on_departure = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		var:travl_travel_sender ?= { save_scope_as = sender }
		var:travl_travel_receiver ?= { save_scope_as = receiver }
		var:travl_travel_leader ?= { save_scope_as = leader }
		travl_get_companions_effect = { COMPANIONS = companions }

		# Ensure the character is at the current location
		location = { save_scope_as = current_location }
		current_travel_plan ?= {
			current_location = { save_scope_as = current_location }
		}
		set_location = scope:current_location

		if = {
			limit = { scope:leader ?= this }

			# Send departure messages
			travl_send_messages_effect = {
				SENDER = scope:sender
				RECEIVER = scope:receiver
				COMPANIONS = companions
				TITLE = travl_msg_departed_for_court
				TEXT = travl_departed_for_court_tt
			}
		}

		if = {
			limit = { scope:leader ?= this }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_departed_leader }
		}
		else_if = {
			limit = { is_in_list = companions }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_departed_companion }
		}
		current_travel_plan ?= {
			every_entourage_character = {
				limit = { has_variable = travl_travel_owner }
				travl_debug_log_effect = { MSG = travl_debug_msg_character_departed_entourage }
			}
		}
	}
}

travl_travel_on_arrival = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		var:travl_travel_sender ?= { save_scope_as = sender }
		var:travl_travel_receiver ?= { save_scope_as = receiver }
		var:travl_travel_leader ?= { save_scope_as = leader }
		travl_get_companions_effect = { COMPANIONS = companions }

		# Ensure the character is at the destination
		location = { save_scope_as = current_location }
		current_travel_plan ?= {
			final_destination_province = { save_scope_as = current_location }
		}
		set_location = scope:current_location

		if = {
			limit = { scope:leader ?= this }

			# Ensure companions arrive as well
			every_in_list = {
				list = companions
				limit = { is_travel_entourage_character = no }
				current_travel_plan ?= {
					add_destination_progress = { years = 2 }
				}
			}

			# Send arrival messages
			travl_send_messages_effect = {
				SENDER = scope:sender
				RECEIVER = scope:receiver
				COMPANIONS = companions
				TITLE = travl_msg_arrived_at_court
				TEXT = travl_arrived_at_court_tt
			}
		}

		if = {
			limit = { scope:leader ?= this }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_arrived_leader }
		}
		else_if = {
			limit = { is_in_list = companions }
			travl_debug_log_effect = { MSG = travl_debug_msg_character_arrived_companion }
		}
		current_travel_plan ?= {
			every_entourage_character = {
				limit = { has_variable = travl_travel_owner }
				travl_debug_log_effect = { MSG = travl_debug_msg_character_arrived_entourage }
			}
		}

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_and_companions_effect = yes
		travl_remove_owner_effect = yes

		# Remove travel variables from entourage characters
		current_travel_plan ?= {
			every_entourage_character = {
				travl_remove_sender_and_receiver_effect = yes
				travl_remove_leader_and_companions_effect = yes
				travl_remove_owner_effect = yes
			}
		}
	}
}

# Arrival in any province during travel
on_travel_plan_movement = {
	on_actions = { travl_on_travel_plan_movement }
}

travl_on_travel_plan_movement = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_moved }

		var:travl_travel_sender ?= { save_scope_as = sender }
		var:travl_travel_receiver ?= { save_scope_as = receiver }
		var:travl_travel_leader ?= { save_scope_as = leader }
		travl_get_companions_effect = { COMPANIONS = companions }

		# Ensure the character is at the current location
		location = { save_scope_as = current_location }
		current_travel_plan ?= {
			current_location = { save_scope_as = current_location }
		}
		set_location = scope:current_location

		# Trigger on_entourage_added for newly added entourage characters
		current_travel_plan ?= {
			travel_plan_owner = { save_scope_as = owner }
			every_entourage_character = {
				limit = {
					NOT = { has_variable = travl_travel_receiver }
				}
				trigger_event = {
					on_action = travl_on_entourage_character_added
				}
			}
		}

		# Trigger on_entourage_removed for newly removed entourage characters
		every_in_list = {
			list = companions
			limit = {
				var:travl_travel_owner ?= prev
				is_travel_entourage_character = no
			}
			trigger_event = {
				on_action = travl_on_entourage_character_removed
			}
		}

		# If the receiver is no longer valid, trigger on_invalid_receiver event
		if = {
			limit = {
				scope:receiver ?= {
					NAND = {
						is_alive = yes
						exists = capital_province
					}
				}
			}
			trigger_event = {
				on_action = travl_on_invalid_receiver
			}
		}
		# If the receiver's capital province changed, trigger on_destination_changed event
		else_if = {
			limit = {
				scope:receiver ?= { exists = capital_province }
				current_travel_plan ?= {
					NOT = { final_destination_province = scope:receiver.capital_province }
				}
			}
			trigger_event = {
				on_action = travl_on_destination_changed
			}
		}
	}
}

# Starting a travel plan (starting to travel to the first destination)
on_travel_plan_start = {
	on_actions = { travl_on_travel_plan_start }
}

travl_on_travel_plan_start = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_started }
	}
}

# Arrival in a destination province during travel (a travel plan can have multiple sequential destinations)
on_travel_plan_arrival = {
	on_actions = { travl_on_travel_plan_arrival }
}

travl_on_travel_plan_arrival = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_arrived }
	}
}

# Completed a travel plan (arrived at final destination, or completed through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
on_travel_plan_complete = {
	on_actions = { travl_on_travel_plan_complete }
}

travl_on_travel_plan_complete = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_completed }
	}
}

# Aborted a travel plan (travel plan was not completed, or aborted through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
# This usually means everyone gets teleported to their default location after this.
on_travel_plan_abort = {
	on_actions = { travl_on_travel_plan_abort }
}

travl_on_travel_plan_abort = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
		has_variable = travl_travel_leader
		NOT = { has_variable = travl_suppress_events }
	}

	effect = {
		travl_debug_log_effect = { MSG = travl_debug_msg_travel_aborted }

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_or_companion_effect = yes
		travl_remove_owner_effect = yes

		# Remove travel variables from entourage characters
		current_travel_plan ?= {
			every_entourage_character = {
				travl_remove_sender_and_receiver_effect = yes
				travl_remove_leader_or_companion_effect = yes
				travl_remove_owner_effect = yes
			}
		}
	}
}

# Cancelled a travel plan. Travel plan was cancelled by player interaction, and has
# been rerouted back home. (the travel plan doesn't end yet until they arrive home)
# People in the travel plan were removed from associated activities.
on_travel_plan_cancel = {
	on_actions = { travl_on_travel_plan_cancel }
}

travl_on_travel_plan_cancel = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_cancelled }
	}
}

# If the travel leader gets removed (not replaced), this will trigger.
# Root - The owner of the travel plan
# scope:travel_plan - The travel plan
# scope:old_travel_leader - The now removed leader.
on_travel_leader_removed = {
	on_actions = { travl_on_travel_leader_removed }
}

travl_on_travel_leader_removed = {
	trigger = {
		has_variable = travl_travel_sender
		has_variable = travl_travel_receiver
	}

	effect = {
		#travl_debug_log_effect = { MSG = travl_debug_msg_travel_leader_removed }
	}
}

travl_on_entourage_character_added = {
	effect = {
		travl_set_sender_and_receiver_effect = {
			SENDER = scope:sender
			RECEIVER = scope:receiver
			EVENT = flag:on_entourage_added
		}
		travl_add_leader_or_companion_effect = yes
		travl_set_owner_effect = { OWNER = scope:owner }

		travl_debug_log_effect = { MSG = travl_debug_msg_entourage_character_added }
	}
}

travl_on_entourage_character_removed = {
	effect = {
		travl_debug_log_effect = { MSG = travl_debug_msg_entourage_character_removed }

		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_or_companion_effect = yes
		travl_remove_owner_effect = yes
	}
}