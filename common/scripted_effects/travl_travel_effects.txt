travl_travel_effect = {
	# Determine sender
	clear_saved_scope = sender
	if = {
		limit = { exists = $SENDER$ }
		$SENDER$ = { save_temporary_scope_as = sender }
	}
	else = {
		save_temporary_scope_as = sender
	}

	# Determine receiver
	travl_set_receiver_effect = yes

	if = {
		limit = {
			OR = {
				NOT = { has_variable = travl_location }
				travl_is_near_saved_location_trigger = yes
			}
		}

		# We don't have a saved location or we are near it
		# Travel from our current location to the receiver's capital
		travl_start_travel_effect = {
			SENDER = scope:sender
			RECEIVER = scope:receiver
			EVENT = $EVENT$
		}
	}
	else_if = {
		limit = {
			scope:receiver ?= { exists = capital_province }
			location = scope:receiver.capital_province
		}

		# We are away from our saved location, and our current location is the receiver's capital,
		# so we teleported to the "right" location
		# Restore our saved location and travel from it to our current one
		set_location = var:travl_location
		travl_start_travel_effect = {
			SENDER = scope:sender
			RECEIVER = scope:receiver
			EVENT = $EVENT$
		}
	}
	else = {
		# We are away from our saved location, and our current location is not the receiver's capital,
		# so we teleported to the "wrong" location
		# Restore our saved location without travel
		travl_debug_log_effect = { MSG = travl_debug_msg_restoring_location }
		set_location = var:travl_location
	}
}

travl_restore_location_effect = {
	if = {
		limit = {
			has_variable = travl_location
			travl_is_near_saved_location_trigger = no
		}

		travl_debug_log_effect = { MSG = travl_debug_msg_restoring_location }
		set_location = var:travl_location
	}
}

travl_start_travel_effect = {
	if = {
		limit = {
			is_alive = yes
			exists = $RECEIVER$
			exists = $RECEIVER$.capital_province

			# Not imprisoned, hostage, or guest of somebody else
			travl_may_travel_to_receiver_trigger = { RECEIVER = $RECEIVER$ }

			NOR = {
				# Not traveling and already in the receiver's capital
				AND = {
					is_travelling = no
					location = $RECEIVER$.capital_province
				}

				# Already traveling to the receiver's capital and near current location
				AND = {
					travl_is_travelling_to_receiver_trigger = { RECEIVER = $RECEIVER$ }
					travl_is_near_current_location_trigger = yes
				}

				# In the receiver's entourage
				travl_is_in_travel_entourage_of_trigger = { OWNER = $RECEIVER$ }

				# Vanilla travel owner, and either the receiver or a hostage, guardian, ward, or adoptee
				AND = {
					travl_is_vanilla_travel_owner_trigger = yes
					OR = {
						this = $RECEIVER$
						travl_is_vanilla_bp2_traveler_trigger = yes
					}
				}

				# Going to join travel owned by the receiver (e.g. due to vanilla event)
				travl_is_joining_travel_trigger = {
					OWNER = $RECEIVER$
					EVENT = $EVENT$
				}
			}
		}

		travl_set_event_effect = { EVENT = $EVENT$ }

		# Check that the receiver's capital is this character's default location
		if = {
			limit = {
				NOT = { default_location = $RECEIVER$.capital_province }
			}
			default_location = { save_temporary_scope_as = default_location }
			travl_error_log_2_effect = {
				MSG = travl_error_msg_starting_travel_to_non_default_location
				NAME1 = receiver TYPE1 = flag:character
				NAME2 = default_location TYPE2 = flag:location
			}
		}

		if = {
			limit = {
				current_travel_plan ?= {
					travel_plan_owner = {
						is_alive = yes
						has_variable = travl_travel_sender
						has_variable = travl_travel_receiver
					}
				}
			}

			travl_debug_log_effect = { MSG = travl_debug_msg_aborting_travel_before_starting }
		}

		# Suppress events, we'll update leader and companions manually
		set_variable = {
			name = travl_suppress_events
			value = yes
			days = 1
		}

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_or_companion_effect = yes

		# Send added entourage characters to pool
		travl_send_added_characters_to_pool_effect = yes

		# Abort current travel plan
		location = { save_temporary_scope_as = current_location }
		current_travel_plan ?= {
			if = {
				limit = { travel_plan_owner = prev }
				abort_travel_plan = yes
			}
			else = {
				remove_character = prev
			}
		}
		set_location = scope:current_location

		# Determine travel owner
		clear_saved_scope = travel_owner
		if = {
			limit = {
				$RECEIVER$ = { is_at_same_location = prev }
			}
			$RECEIVER$ = { save_temporary_scope_as = travel_owner }
		}
		else_if = {
			limit = {
				is_imprisoned = yes
				liege ?= { is_at_same_location = prev }
			}
			liege = { save_temporary_scope_as = travel_owner }
		}

		if = {
			limit = {
				is_ruler = no
				is_travelling = no
				scope:travel_owner ?= {
					is_ruler = yes
					is_at_same_location = prev
					travl_is_travelling_to_receiver_trigger = { RECEIVER = $RECEIVER$ }
					current_travel_plan ?= {
						days_travelled <= 1
					}
				}
			}

			#travl_debug_log_effect = { MSG = travl_debug_msg_adding_entourage_character }

			# Add character to the travel owner's entourage
			save_temporary_scope_as = companion
			scope:travel_owner = {
				current_travel_plan ?= {
					if = {
						limit = {
							scope:travel_owner = {
								is_imprisoned = no
								court_position:travel_leader_court_position ?= scope:companion
							}
						}
						set_travel_leader = scope:companion
					}
					else = {
						add_companion = scope:companion
					}
				}
			}
		}
		else = {
			# Set travel variables
			travl_set_sender_and_receiver_effect = {
				SENDER = $SENDER$
				RECEIVER = $RECEIVER$
			}

			# Add character as leader or companion
			travl_add_leader_or_companion_effect = yes

			# Recruit travel leader
			travl_recruit_travel_leader_effect = yes

			if = {
				limit = { exists = scope:travel_leader }

				#travl_debug_log_effect = { MSG = travl_debug_msg_starting_travel_with_travel_leader }
				#scope:travel_leader = {
				#	travl_debug_log_effect = { MSG = travl_debug_msg_recruited_as_travel_leader }
				#}

				# Start new travel plan with travel leader
				start_travel_plan = {
					destination = $RECEIVER$.capital_province
					return_trip = no
					travel_leader = scope:travel_leader
					players_use_planner = no
					on_start_on_action = travl_travel_on_departure
					on_arrival_on_action = travl_travel_on_arrival
					on_arrival_destinations = last
				}
				send_interface_toast = {
					title = travl_travel_leader_recruited.t
					left_icon = scope:travel_leader
					show_as_tooltip = {
						current_travel_plan ?= {
							set_travel_leader = scope:travel_leader
						}
					}
				}
			}
			else = {
				#travl_debug_log_effect = { MSG = travl_debug_msg_starting_travel }

				# Start new travel plan
				start_travel_plan = {
					destination = $RECEIVER$.capital_province
					return_trip = no
					players_use_planner = no
					on_start_on_action = travl_travel_on_departure
					on_arrival_on_action = travl_travel_on_arrival
					on_arrival_destinations = last
				}
			}

			# Add travel plan modifiers
			if = {
				limit = { is_imprisoned = yes }
				current_travel_plan ?= {
					add_travel_plan_modifier = travl_is_imprisoned_modifier
				}
			}
		}
	}
}

travl_abort_travel_effect = {
	if = {
		limit = {
			current_travel_plan ?= {
				travel_plan_owner = {
					is_alive = yes
					has_variable = travl_travel_sender
					has_variable = travl_travel_receiver
				}
			}
		}

		travl_set_event_effect = { EVENT = $EVENT$ }
		travl_debug_log_effect = { MSG = travl_debug_msg_aborting_travel }

		# Suppress events, we'll update leader and companions manually
		set_variable = {
			name = travl_suppress_events
			value = yes
			days = 1
		}

		# Remove travel variables
		travl_remove_sender_and_receiver_effect = yes
		travl_remove_leader_or_companion_effect = yes

		# Send added entourage characters to pool
		travl_send_added_characters_to_pool_effect = yes

		# Abort current travel plan
		location = { save_temporary_scope_as = current_location }
		current_travel_plan ?= {
			if = {
				limit = { travel_plan_owner = prev }
				abort_travel_plan = yes
			}
			else = {
				remove_character = prev
			}
		}
		set_location = scope:current_location
	}
}

travl_add_leader_or_companion_effect = {
	var:travl_travel_receiver ?= { save_temporary_scope_as = receiver1 }

	# Find an existing travel leader in the current location
	location = {
		random_character_in_location = {
			limit = {
				travl_is_travelling_to_receiver_trigger = { RECEIVER = scope:receiver1 }
				var:travl_travel_leader ?= this
				current_travel_plan ?= {
					days_travelled <= 1
				}
			}
			save_temporary_scope_as = leader1
		}
	}

	if = {
		limit = { exists = scope:leader1 }

		# Add character as companion
		scope:leader1 = {
			travl_get_companions_effect = { COMPANIONS = companions1 }
		}
		add_to_temporary_list = companions1
	}
	else = {
		# Set character as leader
		save_temporary_scope_as = leader1
	}

	# Update leader and companions for all characters
	scope:leader1 ?= {
		travl_set_leader_and_companions_effect = {
			LEADER = this
			COMPANIONS = companions1
		}
		every_in_list = {
			list = companions1
			travl_set_leader_and_companions_effect = {
				LEADER = prev
				COMPANIONS = none
			}
		}
	}
}

travl_remove_leader_or_companion_effect = {
	# Get leader and companions
	var:travl_travel_leader ?= { save_temporary_scope_as = leader2 }
	scope:leader2 ?= {
		travl_get_companions_effect = { COMPANIONS = companions2 }
	}

	if = {
		limit = {
			scope:leader2 ?= this
			any_in_list = {
				list = companions2
				count > 0
			}
		}

		travl_debug_log_effect = { MSG = travl_debug_msg_changing_leader }

		# Set random companion as leader
		random_in_list = {
			list = companions2
			save_temporary_scope_as = leader2
			remove_from_list = companions2
		}
	}
	else_if = {
		limit = { is_in_list = companions2 }

		travl_debug_log_effect = { MSG = travl_debug_msg_removing_companion }

		# Remove character as companion
		remove_from_list = companions2
	}

	# Update leader and companions for remaining characters
	scope:leader2 ?= {
		travl_set_leader_and_companions_effect = {
			LEADER = this
			COMPANIONS = companions2
		}
		every_in_list = {
			list = companions2
			travl_set_leader_and_companions_effect = {
				LEADER = prev
				COMPANIONS = none
			}
		}
	}

	# Remove leader and companions for this character
	travl_remove_leader_and_companions_effect = yes
}

travl_get_travelers_effect = {
	$LEADER$ = {
		add_to_temporary_list = $TRAVELERS$
		current_travel_plan ?= {
			every_entourage_character = {
				add_to_temporary_list = $TRAVELERS$
			}
		}
	}
	every_in_list = {
		list = $COMPANIONS$
		add_to_temporary_list = $TRAVELERS$
		current_travel_plan ?= {
			every_entourage_character = {
				add_to_temporary_list = $TRAVELERS$
			}
		}
	}
}

travl_set_sender_and_receiver_effect = {
	set_variable = {
		name = travl_travel_sender
		value = $SENDER$
		years = 2
	}
	set_variable = {
		name = travl_travel_receiver
		value = $RECEIVER$
		years = 2
	}
}

travl_remove_sender_and_receiver_effect = {
	if = {
		limit = { has_variable = travl_travel_sender }
		remove_variable = travl_travel_sender
	}
	if = {
		limit = { has_variable = travl_travel_receiver }
		remove_variable = travl_travel_receiver
	}
}

travl_set_leader_and_companions_effect = {
	set_variable = {
		name = travl_travel_leader
		value = $LEADER$
		years = 2
	}
	clear_variable_list = travl_travel_companions
	save_temporary_scope_as = character
	every_in_list = {
		list = $COMPANIONS$
		scope:character = {
			add_to_variable_list = {
				name = travl_travel_companions
				target = prev
			}
		}
	}
}

travl_remove_leader_and_companions_effect = {
	if = {
		limit = { has_variable = travl_travel_leader }
		remove_variable = travl_travel_leader
	}
	clear_variable_list = travl_travel_companions
}

travl_get_companions_effect = {
	if = {
		limit = { has_variable_list = travl_travel_companions }
		every_in_list = {
			variable = travl_travel_companions
			limit = { is_alive = yes }
			add_to_temporary_list = $COMPANIONS$
		}
	}
}

travl_set_event_effect = {
	set_variable = {
		name = travl_travel_event
		value = $EVENT$
		days = 2
	}
}

travl_send_messages_effect = {
	save_temporary_scope_as = character

	if = {
		limit = {
			exists = $SENDER$
			travl_travel_should_send_message_trigger = { CHARACTER = $SENDER$ }
		}
		$SENDER$ = {
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				every_in_list = {
					list = $TRAVELERS$
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
			}
		}
	}
	if = {
		limit = {
			exists = $RECEIVER$
			NOT = { $RECEIVER$ = $SENDER$ }
			travl_travel_should_send_message_trigger = { CHARACTER = $RECEIVER$ }
		}
		$RECEIVER$ = {
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				every_in_list = {
					list = $TRAVELERS$
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
			}
		}
	}
}

travl_set_receiver_effect = {
	clear_saved_scope = receiver
	if = {
		limit = { exists = imprisoner }
		imprisoner = { save_temporary_scope_as = receiver }
	}
	else_if = {
		limit = { exists = capital_province }
		save_temporary_scope_as = receiver
	}
	else_if = {
		limit = { exists = warden }
		warden = { save_temporary_scope_as = receiver }
	}
	else_if = {
		limit = { exists = host }
		host = { save_temporary_scope_as = receiver }
	}
	else_if = {
		limit = { exists = liege }
		liege = { save_temporary_scope_as = receiver }
	}
}

travl_add_courtier_effect = {
	$COURTIER$ = {
		set_variable = {
			name = travl_adding_courtier
			value = yes
			days = 1
		}
	}
	add_courtier = $COURTIER$
}

travl_notify_liege_effect = {
	# Trigger on_courtier_event event for liege
	liege ?= {
		save_temporary_scope_as = liege
		if = {
			limit = {
				is_alive = yes
				exists = capital_province
				travl_is_teleporting_character_trigger = no
				travl_should_notify_trigger = { LIEGE = scope:liege }
			}
			trigger_event = {
				on_action = travl_on_courtier_event
			}
		}
	}
}

travl_notify_courtiers_effect = {
	# Trigger on_liege_event event for prisoners, hostages, guests, and courtiers
	save_temporary_scope_as = liege
	if = {
		limit = {
			is_alive = yes
			exists = capital_province
		}

		every_prisoner = {
			add_to_temporary_list = courtiers
		}
		every_warden_hostage = {
			limit = { is_imprisoned = no }
			add_to_temporary_list = courtiers
		}
		every_foreign_court_guest = {
			limit = { is_imprisoned = no }
			add_to_temporary_list = courtiers
		}
		every_pool_guest = {
			limit = { is_imprisoned = no }
			add_to_temporary_list = courtiers
		}
		every_courtier = {
			limit = {
				is_imprisoned = no
				is_hostage = no
				is_foreign_court_guest = no
			}
			add_to_temporary_list = courtiers
		}

		every_in_list = {
			list = courtiers
			limit = {
				travl_is_teleporting_character_trigger = no
				travl_should_notify_trigger = { LIEGE = scope:liege }
			}
			trigger_event = {
				on_action = travl_on_liege_event
			}
		}
	}
}

travl_recruit_travel_leader_effect = {
	clear_saved_scope = travel_leader
	if = {
		limit = {
			is_ruler = yes
			is_imprisoned = yes
			exists = imprisoner
		}

		# Try to find a suitable pool character, or else create a new one
		if = {
			limit = {
				exists = imprisoner.capital_province
				any_pool_character = {
					province = imprisoner.capital_province
					is_available_ai_adult = yes
					has_no_particular_noble_roots_trigger = yes
					martial >= average_skill_rating
					prowess >= mediocre_skill_rating
					has_trait = education_martial
				}
			}
			random_pool_character = {
				province = imprisoner.capital_province
				limit = {
					is_available_ai_adult = yes
					has_no_particular_noble_roots_trigger = yes
					martial >= average_skill_rating
					prowess >= mediocre_skill_rating
					has_trait = education_martial
				}
				save_temporary_scope_as = travel_leader
			}
		}
		else = {
			create_character = {
				location = root.location
				template = new_warrior_character
				dynasty = none
				faith = imprisoner.faith
				culture = imprisoner.culture
				gender_female_chance = root_soldier_female_chance # TODO
				save_temporary_scope_as = travel_leader
			}
		}
	}

	if = {
		limit = { exists = scope:travel_leader }
		scope:travel_leader = {
			move_to_pool = yes
			add_character_flag = travel_option_added_character
		}
	}
}

travl_send_added_characters_to_pool_effect = {
	current_travel_plan ?= {
		every_entourage_character = {
			limit = {
				has_character_flag = travel_option_added_character
			}
			select_and_move_to_pool_effect = yes
		}
	}
}
