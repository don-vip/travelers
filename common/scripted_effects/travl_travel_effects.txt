travl_travel_to_court_effect = {
	if = {
		limit = {
			exists = $RECEIVER$
			NOR = {
				# Currently participating in travel owned by the receiver
				AND = {
					NOT = { this = $RECEIVER$ }
					current_travel_plan ?= {
						travel_plan_owner = $RECEIVER$
					}
				}

				# Imprisoned by somebody else than the receiver
				AND = {
					is_imprisoned = yes
					NOT = { is_imprisoned_by = $RECEIVER$ }
				}

				# Not imprisoned and somebody else's hostage
				AND = {
					is_imprisoned = no
					is_hostage = yes
					NOT = { is_hostage_of = $RECEIVER$ }
				}

				# Not imprisoned and somebody else's guest
				AND = {
					is_imprisoned = no
					is_foreign_court_guest = yes
					NOT = { is_foreign_court_guest_of = $RECEIVER$ }
				}

				# In an army
				is_in_army = yes
			}
		}

		if = {
			limit = {
				NOT = { location = $RECEIVER$.capital_province }
			}

			# Travel from current location to receiver's capital province
			travl_travel_effect = {
				SENDER = $SENDER$
				RECEIVER = $RECEIVER$
				EVENT = $EVENT$
			}
		}
		else = {
			# Abort any ongoing travel
			travl_abort_travel_effect = yes
		}
	}
}

travl_travel_to_location_effect = {
	save_scope_as = traveler

	if = {
		limit = {
			has_variable = travl_location
			NOT = { var:travl_location = location }
		}

		# Determine receiver from the current location
		random_living_character = {
			limit = {
				is_landed = yes
				capital_province = scope:traveler.location
			}
			save_scope_as = receiver
		}

		if = {
			limit = { exists = scope:receiver }

			# Travel from saved location to receiver's capital province
			set_location = var:travl_location
			travl_travel_effect = {
				SENDER = scope:traveler
				RECEIVER = scope:receiver
				EVENT = $EVENT$
			}
		}
	}
}

travl_restore_location_effect = {
	if = {
		limit = {
			has_variable = travl_location
			NOT = { var:travl_location = location }
		}

		travl_debug_log_effect = { MSG = travl_debug_msg_restoring_location }
		location = { save_scope_as = current_location }
		set_location = var:travl_location

		if = {
			limit = {
				current_travel_plan ?= {
					current_location = scope:current_location
					days_travelled <= 1
				}
			}

			save_scope_as = sender
			travl_set_receiver_effect = yes

			travl_travel_to_court_effect = {
				SENDER = scope:sender
				RECEIVER = scope:receiver
				EVENT = flag:on_restore_location
			}
		}
	}
}

travl_travel_effect = {
	if = {
		limit = {
			exists = $RECEIVER$.capital_province
			NOR = {
				location = $RECEIVER$.capital_province
				current_travel_plan ?= {
					current_location = prev.location
					final_destination_province = $RECEIVER$.capital_province
				}
			}
		}

		# Abort current travel plan
		location = { save_scope_as = current_location }
		current_travel_plan ?= {
			abort_travel_plan = yes
		}
		set_location = scope:current_location

		# Find an existing travel leader in the current location
		location = {
			random_character_in_location = {
				limit = {
					var:travl_travel_receiver ?= $RECEIVER$
					var:travl_travel_leader ?= this
					current_travel_plan ?= {
						final_destination_province = $RECEIVER$.capital_province
						days_travelled <= 1
					}
				}
				save_scope_as = leader
			}
		}

		if = {
			limit = { exists = scope:leader }

			# Add the current character to the list of companions
			scope:leader = {
				travl_travel_get_companions_effect = { COMPANIONS = companions }
			}
			add_to_list = companions

			# Set travel variables
			travl_travel_set_variables_effect = {
				SENDER = $SENDER$
				RECEIVER = $RECEIVER$
				LEADER = scope:leader
				COMPANIONS = companions
				EVENT = $EVENT$
			}

			# Update leader and companions for all characters in the group
			scope:leader = {
				travl_travel_update_leader_and_companions_effect = { COMPANIONS = companions }
			}

			#travl_debug_log_effect = { MSG = travl_debug_msg_staring_travel_as_companion }

			# Start new travel plan
			start_travel_plan = {
				destination = $RECEIVER$.capital_province
				return_trip = no
				on_start_on_action = travl_travel_on_departure
				on_arrival_on_action = travl_travel_on_arrival
				on_arrival_destinations = last
			}
		}
		else = {
			# Set travel variables
			travl_travel_set_variables_effect = {
				SENDER = $SENDER$
				RECEIVER = $RECEIVER$
				LEADER = this
				COMPANIONS = none
				EVENT = $EVENT$
			}

			#travl_debug_log_effect = { MSG = travl_debug_msg_staring_travel_as_leader }

			# Start new travel plan
			start_travel_plan = {
				destination = $RECEIVER$.capital_province
				return_trip = no
				on_start_on_action = travl_travel_on_departure
				on_arrival_on_action = travl_travel_on_arrival
				on_arrival_destinations = last
			}
		}
	}
}

travl_abort_travel_effect = {
	if = {
		limit = {
			has_variable = travl_travel_sender
			has_variable = travl_travel_receiver
		}

		travl_debug_log_effect = { MSG = travl_debug_msg_aborting_travel }

		# Abort current travel plan
		location = { save_scope_as = current_location }
		current_travel_plan ?= {
			abort_travel_plan = yes
		}
		set_location = scope:current_location

		# Remove travel variables
		travl_travel_remove_variables_effect = yes
	}
}

travl_travel_update_leader_and_companions_effect = {
	set_variable = {
		name = travl_travel_leader
		value = this
		years = 2
	}
	travl_travel_set_companions_effect = { COMPANIONS = $COMPANIONS$ }

	every_in_list = {
		list = $COMPANIONS$

		set_variable = {
			name = travl_travel_leader
			value = prev
			years = 2
		}
		travl_travel_set_companions_effect = { COMPANIONS = $COMPANIONS$ }
	}
}

travl_travel_set_variables_effect = {
	set_variable = {
		name = travl_travel_sender
		value = $SENDER$
		years = 2
	}
	set_variable = {
		name = travl_travel_receiver
		value = $RECEIVER$
		years = 2
	}
	set_variable = {
		name = travl_travel_leader
		value = $LEADER$
		years = 2
	}
	travl_travel_set_companions_effect = { COMPANIONS = $COMPANIONS$ }
	set_variable = {
		name = travl_travel_event
		value = $EVENT$
		years = 2
	}
}

travl_travel_remove_variables_effect = {
	if = {
		limit = { has_variable = travl_travel_sender }
		remove_variable = travl_travel_sender
	}
	if = {
		limit = { has_variable = travl_travel_receiver }
		remove_variable = travl_travel_receiver
	}
	if = {
		limit = { has_variable = travl_travel_leader }
		remove_variable = travl_travel_leader
	}
	if = {
		limit = { has_variable_list = travl_travel_companions }
		clear_variable_list = travl_travel_companions
	}
	if = {
		limit = { has_variable = travl_travel_event }
		remove_variable = travl_travel_event
	}
}

travl_travel_set_companions_effect = {
	save_temporary_scope_as = character
	clear_variable_list = travl_travel_companions
	every_in_list = {
		list = $COMPANIONS$
		limit = { is_alive = yes }
		scope:character = {
			add_to_variable_list = {
				name = travl_travel_companions
				target = prev
			}
		}
	}
}

travl_travel_get_companions_effect = {
	if = {
		limit = { has_variable_list = travl_travel_companions }
		every_in_list = {
			variable = travl_travel_companions
			limit = { is_alive = yes }
			add_to_list = $COMPANIONS$
		}
	}
}

travl_travel_send_messages_effect = {
	save_temporary_scope_as = character

	if = {
		limit = {
			exists = $SENDER$
			travl_travel_should_send_message_trigger = { CHARACTER = $SENDER$ }
		}
		$SENDER$ = {
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				scope:character = {
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
				every_in_list = {
					list = $COMPANIONS$
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
			}
		}
	}
	if = {
		limit = {
			exists = $RECEIVER$
			NOT = { $RECEIVER$ = $SENDER$ }
			travl_travel_should_send_message_trigger = { CHARACTER = $RECEIVER$ }
		}
		$RECEIVER$ = {
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				scope:character = {
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
				every_in_list = {
					list = $COMPANIONS$
					custom_description = {
						text = $TEXT$
						subject = this
						object = $RECEIVER$
					}
				}
			}
		}
	}
}

travl_set_receiver_effect = {
	if = {
		limit = { exists = imprisoner }
		imprisoner = { save_scope_as = receiver }
	}
	if = {
		limit = { is_landed = yes }
		save_scope_as = receiver
	}
	else_if = {
		limit = { exists = warden }
		warden = { save_scope_as = receiver }
	}
	else_if = {
		limit = { exists = host }
		host = { save_scope_as = receiver }
	}
	else_if = {
		limit = { exists = liege }
		liege = { save_scope_as = receiver }
	}
}

