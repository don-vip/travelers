travl_event_apply_outcome_effect = {
	travl_debug_log_effect = { MSG = travl_debug_msg_$EVENT$_$OUTCOME$ }

	# Send messages to potential recipients
	hidden_effect = {
		travl_send_event_messages_effect = {
			RECIPIENTS = $RECIPIENTS$
			TRAVELERS = $TRAVELERS$
			TITLE = travl_msg_$EVENT$_t
			TEXT = travl_msg_$EVENT$_$OUTCOME$
		}
	}

	# Apply character effects
	every_in_list = {
		list = $TRAVELERS$
		travl_event_apply_character_effect = yes
	}
}

travl_send_event_messages_effect = {
	if = {
		limit = { has_game_rule = travl_travel_messages_enabled }

		save_temporary_scope_as = character
		every_in_list = {
			list = $RECIPIENTS$
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				scope:character = {
					custom_tooltip = $TEXT$
				}

				show_as_tooltip = {
					every_in_list = {
						list = $TRAVELERS$
						travl_event_apply_character_effect = yes
					}
				}
			}
		}
	}
}

travl_event_apply_character_effect = {
	# Gain traveler danger XP
	if = {
		limit = { has_variable = travl_event_xp }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_traveler_xp }
		if = {
			limit = { NOT = { has_trait = lifestyle_traveler } }
			add_trait = lifestyle_traveler
		}
		switch = {
			trigger = var:travl_event_xp
			flag:minor = {
				traveler_danger_xp_effect = { MIN = 1 MAX = 3 }
			}
			flag:medium = {
				traveler_danger_xp_effect = { MIN = 3 MAX = 6 }
			}
			flag:major = {
				traveler_danger_xp_effect = { MIN = 6 MAX = 10 }
			}
		}
	}

	# Delay travel plan
	if = {
		limit = { has_variable = travl_event_delay }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_travel_delayed }
		switch = {
			trigger = var:travl_event_delay
			flag:minor = {
				current_travel_plan = {
					delay_travel_plan = { days = 5 }
				}
			}
			flag:medium = {
				current_travel_plan = {
					delay_travel_plan = { days = 20 }
				}
			}
			flag:major = {
				current_travel_plan = {
					delay_travel_plan = { days = 100 }
				}
			}
		}
	}

	# Add travel plan modifier
	if = {
		limit = { has_variable = travl_event_modifier }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_travel_modified }
		switch = {
			trigger = var:travl_event_modifier
			flag:travel_guide_modifier = {
				current_travel_plan = {
					add_travel_plan_modifier = travel_guide_modifier
				}
			}
		}
	}

	# Apply character effect
	if = {
		limit = { has_variable = travl_event_effect }
		switch = {
			trigger = var:travl_event_effect
			flag:kill = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_died }
				switch = {
					trigger = var:travl_event_death_reason
					flag:death_fight = {
						death = { death_reason = death_fight killer = var:travl_event_character }
					}
					flag:death_lost_in_the_bog = {
						death = { death_reason = death_lost_in_the_bog }
					}
					flag:death_lost_in_the_forest = {
						death = { death_reason = death_lost_in_the_forest }
					}
				}
			}
			flag:maim = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_maimed }
				add_trait = maimed
			}
			flag:wound = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_wounded }
				increase_wounds_effect = { REASON = fight }
			}
			flag:add_prestige = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_prestige }
				add_prestige = var:travl_event_value
			}
			flag:remove_prestige = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_lost_prestige }
				add_prestige = { value = var:travl_event_value multiply = -1 }
			}
			flag:add_gold = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_gold }
				add_short_term_gold = var:travl_event_value
			}
			flag:remove_gold = {
				travl_debug_log_effect = { MSG = travl_debug_msg_event_character_lost_gold }
				remove_short_term_gold = var:travl_event_value
			}
		}
	}

	# Remove event variables
	if = {
		limit = { is_alive = yes }
		remove_variable = travl_event_effect
		remove_variable = travl_event_character
		remove_variable = travl_event_value
		remove_variable = travl_event_death_reason
		remove_variable = travl_event_xp
		remove_variable = travl_event_delay
		remove_variable = travl_event_modifier
	}
}