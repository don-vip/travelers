travl_event_add_prestige_effect = {
	set_variable = { name = travl_event_prestige value = $VALUE$ }
}

travl_event_remove_prestige_effect = {
	set_variable = { name = travl_event_prestige value = { value = $VALUE$ multiply = -1 } }
}

travl_event_add_piety_effect = {
	set_variable = { name = travl_event_piety value = $VALUE$ }
}

travl_event_remove_piety_effect = {
	set_variable = { name = travl_event_piety value = { value = $VALUE$ multiply = -1 } }
}

travl_event_add_gold_effect = {
	set_variable = { name = travl_event_gold value = $VALUE$ }
}

travl_event_remove_gold_effect = {
	set_variable = { name = travl_event_gold value = { value = $VALUE$ multiply = -1 } }
}

travl_event_add_trait_effect = {
	set_variable = { name = travl_event_trait value = $TRAIT$ }
}

travl_event_wound_effect = {
	set_variable = { name = travl_event_wound value = $REASON$ }
}

travl_event_add_stress_effect = {
	set_variable = { name = travl_event_stress_gain_trait value = $TRAIT$ }
	set_variable = { name = travl_event_stress_gain_value value = $VALUE$ }
}

travl_event_visit_court_effect = {
	set_variable = { name = travl_event_host value = $HOST$ }
}

travl_event_add_traveler_xp_effect = {
	set_variable = { name = travl_event_xp value = $VALUE$ }
}

travl_event_delay_travel_effect = {
	set_variable = { name = travl_event_delay value = $VALUE$ }
}

travl_event_add_travel_modifier_effect = {
	set_variable = { name = travl_event_modifier value = $VALUE$ }
}

travl_event_add_travel_waypoint_effect = {
	set_variable = { name = travl_event_waypoint value = $VALUE$ }
}

travl_event_death_effect = {
	set_variable = { name = travl_event_death value = $REASON$ }
	set_variable = { name = travl_event_killer value = $KILLER$ }
}

travl_event_apply_outcome_effect = {
	travl_debug_log_effect = { MSG = travl_debug_msg_$EVENT$_$OUTCOME$ }

	# Send messages to potential recipients
	hidden_effect = {
		travl_send_event_messages_effect = {
			RECIPIENTS = $RECIPIENTS$
			TRAVELERS = $TRAVELERS$
			TITLE = travl_msg_$EVENT$_t
			TEXT = travl_msg_$EVENT$_$OUTCOME$
		}
	}

	# Apply character effects
	every_in_list = {
		list = $TRAVELERS$
		travl_event_apply_character_effect = yes
	}
}

travl_send_event_messages_effect = {
	if = {
		limit = { has_game_rule = travl_travel_messages_enabled }

		save_temporary_scope_as = character
		every_in_list = {
			list = $RECIPIENTS$
			send_interface_message = {
				type = event_generic_neutral
				title = $TITLE$
				right_icon = scope:character

				scope:character = {
					custom_tooltip = $TEXT$
				}

				show_as_tooltip = {
					every_in_list = {
						list = $TRAVELERS$
						travl_event_apply_character_effect = yes
					}
				}
			}
		}
	}
}

travl_event_apply_character_effect = {
	# Gain or lose prestige
	if = {
		limit = { has_variable = travl_event_prestige }
		if = {
			limit = { var:travl_event_prestige > 0 }
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_prestige }
			add_prestige = var:travl_event_prestige
		}
		else = {
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_lost_prestige }
			add_prestige = var:travl_event_prestige
		}
	}

	# Gain or lose piety
	if = {
		limit = { has_variable = travl_event_piety }
		if = {
			limit = { var:travl_event_piety > 0 }
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_piety }
			add_piety = var:travl_event_piety
		}
		else = {
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_lost_piety }
			add_piety = var:travl_event_piety
		}
	}

	# Gain or lose gold
	if = {
		limit = { has_variable = travl_event_gold }
		if = {
			limit = { var:travl_event_gold > 0 }
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_gold }
			add_short_term_gold = var:travl_event_gold
		}
		else = {
			travl_debug_log_effect = { MSG = travl_debug_msg_event_character_lost_gold }
			remove_short_term_gold = { value = var:travl_event_gold multiply = -1 }
		}
	}

	# Injure (maimed, etc.)
	if = {
		limit = { has_variable = travl_event_trait }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_injured }
		switch = {
			trigger = var:travl_event_trait
			flag:maimed = {
				add_trait = maimed
			}
		}
	}

	# Increase wounds
	if = {
		limit = { has_variable = travl_event_wound }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_wounded }
		switch = {
			trigger = var:travl_event_wound
			flag:fight = {
				increase_wounds_effect = { REASON = fight }
			}
		}
	}

	# Stress impact
	if = {
		limit = { has_variable = travl_event_stress_gain_trait }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_stress }
		switch = {
			trigger = var:travl_event_stress_gain_value
			flag:massive = {
				travl_event_apply_stress_impact_effect = { VALUE = massive_stress_impact_gain }
			}
			flag:major = {
				travl_event_apply_stress_impact_effect = { VALUE = major_stress_impact_gain }
			}
			flag:medium = {
				travl_event_apply_stress_impact_effect = { VALUE = medium_stress_impact_gain }
			}
		}
	}

	# Start travel to host (must be before travel plan changes)
	if = {
		limit = { has_variable = travl_event_host }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_joined_travel }
		custom_tooltip = {
			text = travl_they_got_a_visitor_tt
			var:travl_event_host = {
				add_visiting_courtier = prev
			}
		}
		set_location = root.location
		travl_travel_effect = {
			SENDER = this
			EVENT = flag:travel_event
		}
		travl_set_location_effect = yes
	}

	# Gain traveler danger XP
	if = {
		limit = { has_variable = travl_event_xp }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_gained_traveler_xp }
		if = {
			limit = { NOT = { has_trait = lifestyle_traveler } }
			add_trait = lifestyle_traveler
		}
		switch = {
			trigger = var:travl_event_xp
			flag:minor = {
				traveler_danger_xp_effect = { MIN = 1 MAX = 3 }
			}
			flag:medium = {
				traveler_danger_xp_effect = { MIN = 3 MAX = 6 }
			}
			flag:major = {
				traveler_danger_xp_effect = { MIN = 6 MAX = 10 }
			}
		}
	}

	# Delay travel plan
	if = {
		limit = { has_variable = travl_event_delay }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_travel_delayed }
		switch = {
			trigger = var:travl_event_delay
			flag:minor = {
				current_travel_plan ?= {
					delay_travel_plan = { days = 5 }
				}
			}
			flag:medium = {
				current_travel_plan ?= {
					delay_travel_plan = { days = 20 }
				}
			}
			flag:major = {
				current_travel_plan ?= {
					delay_travel_plan = { days = 100 }
				}
			}
		}
	}

	# Add travel plan modifier
	if = {
		limit = { has_variable = travl_event_modifier }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_travel_added_modifier }
		switch = {
			trigger = var:travl_event_modifier
			flag:travel_guide_modifier = {
				current_travel_plan ?= {
					add_travel_plan_modifier = travel_guide_modifier
				}
			}
		}
	}

	# Add travel plan waypoint
	if = {
		limit = { has_variable = travl_event_waypoint }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_travel_added_waypoint }
		current_travel_plan ?= {
			add_travel_waypoint = prev.var:travl_event_waypoint
		}
	}

	# Death (must be last)
	if = {
		limit = { has_variable = travl_event_death }
		travl_debug_log_effect = { MSG = travl_debug_msg_event_character_died }
		switch = {
			trigger = var:travl_event_death
			flag:death_fight = {
				death = { death_reason = death_fight killer = var:travl_event_killer }
			}
			flag:death_lost_in_the_bog = {
				death = { death_reason = death_lost_in_the_bog }
			}
			flag:death_lost_in_the_forest = {
				death = { death_reason = death_lost_in_the_forest }
			}
			flag:death_thirst = {
				death = { death_reason = death_thirst }
			}
		}
	}

	# Remove event variables
	if = {
		limit = { is_alive = yes }
		remove_variable = travl_event_prestige
		remove_variable = travl_event_piety
		remove_variable = travl_event_gold
		remove_variable = travl_event_trait
		remove_variable = travl_event_wound
		remove_variable = travl_event_stress_gain_trait
		remove_variable = travl_event_stress_gain_value
		remove_variable = travl_event_host
		remove_variable = travl_event_xp
		remove_variable = travl_event_delay
		remove_variable = travl_event_modifier
		remove_variable = travl_event_waypoint
		remove_variable = travl_event_death
		remove_variable = travl_event_killer
	}
}

travl_event_apply_stress_impact_effect = {
	switch = {
		trigger = var:travl_event_stress_gain_trait
		flag:brave = {
			stress_impact = { brave = $VALUE$ }
		}
		flag:craven = {
			stress_impact = { craven = $VALUE$ }
		}
		flag:forgiving = {
			stress_impact = { forgiving = $VALUE$ }
		}
		flag:vengeful = {
			stress_impact = { vengeful = $VALUE$ }
		}
		flag:generous = {
			stress_impact = { generous = $VALUE$ }
		}
		flag:greedy = {
			stress_impact = { greedy = $VALUE$ }
		}
		flag:trusting = {
			stress_impact = { trusting = $VALUE$ }
		}
		flag:paranoid = {
			stress_impact = { paranoid = $VALUE$ }
		}
		flag:compassionate = {
			stress_impact = { compassionate = $VALUE$ }
		}
		flag:callous = {
			stress_impact = { callous = $VALUE$ }
		}
	}
}