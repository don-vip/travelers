namespace = travl_travel_danger

scripted_effect travl_travel_danger_0014_outcome_effect = {
	# Setup character effects
	travl_travel_danger_0014_$OUTCOME$_effect = yes

	# Send messages to potential recipients and apply character effects
	travl_event_apply_outcome_effect = {
		EVENT = travel_danger_0014
		OUTCOME = $OUTCOME$
		RECIPIENTS = recipients
		TRAVELERS = travelers
	}
}

scripted_effect travl_travel_danger_0014_a_effect = {
	every_in_list = {
		list = travelers
		random_list = {
			50 = {
				travl_event_disease_effect = { DISEASE = flag:ill }
			}
			20 = {
				travl_event_disease_effect = { DISEASE = flag:consumption }
			}
			30 = {}
		}
	}
}

# Danger: Sickness
travl_travel_danger.0014 = {
	type = character_event
	title = travl_travel_danger.0014.t
	desc = travl_travel_danger.0014.desc
	theme = travel_danger
	#hidden = yes

	left_portrait = {
		character = root
		animation = sick
	}

	trigger = {
		# Travel leader
		has_variable = travl_travel_leader
		var:travl_travel_leader = root

		# Available, traveling, adult, and unlanded
		is_available_travelling_adult = yes
		is_location_valid_for_travel_event_on_land = yes
		is_landed = no

		# Danger types
		location = {
			OR = {
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = wetlands
				}
				travel_danger_type = {
					travel_plan = root.current_travel_plan
					terrain = jungle
				}
				has_province_modifier = disease_spreading_modifier
			}
		}

		# Already traveled for some time
		current_travel_plan.days_travelled >= 15
	}

	cooldown = { months = 6 }

	immediate = {
		travl_event_get_main_character_effect = yes
		travl_debug_log_travel_event_effect = { MSG = travl_debug_msg_travel_danger_0014_t }

		var:travl_travel_sender = { save_temporary_scope_as = sender }
		var:travl_travel_receiver = { save_temporary_scope_as = receiver }
		travl_get_companions_effect = { COMPANIONS = companions }

		# Get all relevant travelers (leader and all unlanded companions)
		add_to_list = travelers
		every_in_list = {
			list = companions
			limit = { is_landed = no }
			add_to_list = travelers
		}

		# Get message recipients (sender and / or recieiver)
		travl_get_message_recipients_effect = {
			SENDER = scope:sender
			RECEIVER = scope:receiver
			RECIPIENTS = recipients
		}

		# Add the player as a recipient (debug-only)
		if = {
			limit = { debug_only = yes }
			random_player = { add_to_list = recipients }
		}

		# Save location
		location = { save_scope_as = location }
	}

	# We must press on...
	option = {
		name = travl_travel_danger.0014.a

		travl_travel_danger_0014_outcome_effect = { OUTCOME = a }

		ai_chance = {
			base = 100
		}
	}
}